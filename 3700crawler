#!/usr/bin/env python3

import argparse
import socket
import ssl
from html.parser import HTMLParser
import requests

DEFAULT_SERVER = "proj5.3700.network"
DEFAULT_PORT = 443


class Crawler:

    def __init__(self, arguments):
        self.server = arguments.server
        self.port = arguments.port
        self.username = arguments.username
        self.password = arguments.password

        self.visited = set()
        self.to_visit = set()
        self.session_id = ''
        self.csrf_token = ''


    def run(self):
        mysocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        mysocket.connect((self.server, self.port))
        context = ssl.create_default_context()
        tcp_socket = context.wrap_socket(mysocket, server_hostname=self.server)

        self.login_and_set_header(tcp_socket)

        # GET fakebook page
        request = self.get_path_request("/fakebook/")
        #print("request:\n" + request)
        response = self.receive_1_0_data(request, tcp_socket)
        #self.visited.add("/fakebook/")

        parser = HTMLWebParser(self)
        parser.feed(response)
        # parser.feed('<h2 class=\'secret_flag\' style="color:red">FLAG: 64-characters-of-random-alphanumerics</h2>')

        counter = 0
        while len(self.to_visit) > 0:
            # if counter == 10:
            #     break
            path = self.to_visit.pop()
            request = self.get_path_request(path)
            response = self.receive_1_0_data(request, tcp_socket)
            parser.feed(response)
            self.visited.add(path)
            counter += 1

        # print("FLAGS:")
        # print(parser.get_flags())
        # print("VISITED:")
        # print(self.visited)
        # print("TO VISIT")
        # print(self.to_visit)
        for flag in parser.get_flags():
            print(flag)



    def login_and_set_header(self, tcp_socket):

        request = self.get_path_request("/accounts/login/")
        #print("Request to %s:%d" % (self.server, self.port))
        #print(request)
        response = self.receive_1_0_data(request, tcp_socket)
        #print(response)

        # Get csrfmiddlewaretoken
        # html_parser = html.parser.HTMLParser
        # html_parser.feed(response)
        # html_parser.handle_starttag('input', [()])
        csrfmiddlewaretoken = response.split("\"csrfmiddlewaretoken\"")[1].split("\"")[1]
        #print(csrfmiddlewaretoken)
        # Get csrftoken and sessionid
        self.csrf_token = self.get_csrf_token(response)
        #print(self.csrf_token)
        self.session_id = self.get_session_id_token(response)
        #print(self.session_id)

        # request = self.login_post_request("/accounts/login/?next=/fakebook/")
        request = self.login_post_request("/accounts/login/", csrfmiddlewaretoken)
        #print("request:\n" + request)
        response = self.receive_1_0_data(request, tcp_socket)
        self.csrf_token = self.get_csrf_token(response)
        #print(self.csrf_token)
        self.session_id = self.get_session_id_token(response)
        #print(self.session_id)
        self.handle_response_code(response, tcp_socket)

    def handle_response_code(self, response, tcp_socket):
        response_code = response[9:12]
        #print("Response code:|%s|" % response_code)
        if response_code == '302':
            path = self.get_location_path_from_header(response)
            get_request = self.get_path_request(path)
            self.receive_1_0_data(get_request, tcp_socket)
        elif response_code == '403':
            raise Exception("403 Encountered")
        elif response_code == '404':
            raise Exception("404 Encountered")
        elif response_code == '503':
            raise Exception("503 Encountered")
        else:
            raise Exception("Unrecognzed response code")
        return

    def get_csrf_token(self, data):
        token_onwards = data.split("csrftoken=")[1]
        token = token_onwards.split(";")[0]
        return token

    def get_session_id_token(self, data):
        session_id_onwards = data.split("sessionid=")[1]
        session_id = session_id_onwards.split(";")[0]
        return session_id

    def get_location_path_from_header(self, response):
        path = response.split("Location:")[1][1:2]
        #print("Path:|%s|" % path)
        return path

    def receive_chunks(self, tcp_socket):
        data = tcp_socket.recv(65535)
        # Get Content-Length:
        # Should have Transfer-Encoding:Chunked header
        # HTTP1.1 reponds in chunks - each chunk is preceded by its size - transmission ends when a zero-length chunk
        return

    def receive_1_0_data(self, request, tcp_socket):
        tcp_socket.send(request.encode('utf8'))
        data = tcp_socket.recv(65535)
        decoded_data = data.decode('utf8')
        #print("Response:\n%s" % decoded_data)
        return decoded_data

    def login_post_request(self, path, csrfmiddlewaretoken):
        request = "POST " + path + " HTTP/1.1\r\n"
        request += self.host_header()
        request += self.keep_alive_header()
        body = "username=" + self.username + "&password=" + self.password + "&csrfmiddlewaretoken=" + csrfmiddlewaretoken
        request += self.content_length_header(body)
        request += self.cookie_header()
        request += self.content_type_header()
        # request += "Origin: https://proj5.cs3700.network\r\n"
        # request += "Referer: https://proj5.3700.network/accounts/login/\r\n"
        request += "\r\n"
        request += body
        return request

    def get_path_request(self, path):
        request = "GET " + path + " HTTP/1.1\r\n"
        request += self.get_1_1_headers()
        request += "\r\n"
        return request

    def get_1_1_headers(self):
        headers = self.host_header()
        headers += self.keep_alive_header()
        headers += self.cookie_header()
        return headers

    def add_1_0_get_headers(self, string):
        string += self.keep_alive_header()
        if len(self.session_id) > 0:
            string += self.cookie_header()
        return string + "\r\n"

    # ------- HEADERS --------

    def host_header(self):
        host_header = "Host: " + self.server + ":" + str(self.port) + "\r\n"
        return host_header

    def content_length_header(self, body):
        length = self.utf8len(body)
        length_header = "Content-Length: " + str(length) + "\r\n"
        return length_header

    def content_type_header(self):
        return "Content-Type: application/x-www-form-urlencoded\r\n"

    def keep_alive_header(self):
        keep_alive_header = "Connection: keep-alive\r\n"
        return keep_alive_header

    def cookie_header(self):
        if len(self.csrf_token) == 0 and len(self.session_id) == 0:
            return ""
        cookie_header = "Cookie: "
        if len(self.csrf_token) > 0:
            cookie_header += "csrftoken=" + self.csrf_token
        if len(self.session_id) > 0:
            if len(self.csrf_token) > 0:
                cookie_header += "; "
            cookie_header += "sessionid=" + self.session_id
        cookie_header += "\r\n"
        return cookie_header

    # -------------------------------

    def utf8len(self, s):
        return len(s.encode('utf-8'))

    def get_visited(self):
        return self.visited

    def get_to_visit(self):
        return self.to_visit


class HTMLWebParser(HTMLParser):

    crawler: Crawler

    def __init__(self, crawler):
        HTMLParser.__init__(self)
        self.flags = []
        self.class_flag_attr_found = False
        self.crawler = crawler

    def handle_starttag(self, tag, attrs):
        # print("Start tag:", tag)
        # print("Attrs:", attrs)
        if ('class', 'secret_flag') in attrs:
            self.class_flag_attr_found = True
        for tuple in attrs:
            if 'href' in tuple:
                path = tuple[1]
                if path not in self.crawler.visited and 'fakebook' in path:
                    self.crawler.to_visit.add(path)
        return

    def handle_data(self, data):
        # if 'FLAG:' in data and self.class_flag_attr_found:
        if 'FLAG:' in data:
            flag = data.split("FLAG: ")[1][0:64]
            self.flags.append(flag)
            #print("Flag:", flag)

        # print("Data:", data)

    def get_flags(self):
        #print("Getting flags")
        return self.flags



if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='crawl Fakebook')
    parser.add_argument('-s', dest="server", type=str, default=DEFAULT_SERVER, help="The server to crawl")
    parser.add_argument('-p', dest="port", type=int, default=DEFAULT_PORT, help="The port to use")
    parser.add_argument('username', type=str, help="The username to use")
    parser.add_argument('password', type=str, help="The password to use")
    args = parser.parse_args()
    sender = Crawler(args)
    sender.run()

# koo.k
# 001699319
